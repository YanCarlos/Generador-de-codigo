package $pack;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import com.DAO.DAOGenerico;

/**
 * EJB Generico del cual deben heredar todos los EJB.
 * @author Project TLF 2016-2 Ing Software
 *
 * @param <T> tipo del EJB.
 */
public class EJBGenerico<T> implements Serializable {
    
    /**
    * 
    */
    private static final long serialVersionUID = 1L;

    @PersistenceContext
    private transient EntityManager em;

    protected transient DAOGenerico dao;

    @PostConstruct
    public void postConstruct() {
            dao = new DAOGenerico(em);
    }

    /**
     * Crea la entidad.
     *
     * @param entidad
     */
    public void insert(T entidad) {
            dao.insert(entidad);
    }

    /**
     * Metodo para buscar.
     *
     * @param pk
     *            , llave primaria de la entidad.
     * @return, el objeto o null si no existe.
     */
    public T search(Object pk) {
            return  dao.search(getType(), pk);
    }

    /**
     * Metodo para eliminar una entidad.
     *
     * @param entidad
     */
    public void delete(T entidad) {
            dao.delete(entidad);
    }

    /**
     * Metodo para Editar una entidad.
     *
     * @param entidad
     */
    public void update(T entidad) {
            dao.update(entidad);
    }
    
    /**
    *Metodo para listar todos
    *
    */
    public List<T> list(){
        return dao.listarTodos(getType());
    }

    /**
    * Utilitario para saber el tipo de EJB que es esta instancia.
    * @return el class de este EJB:
    * @throws Exception
    */
    @SuppressWarnings("unchecked")
    public Class<T> getType()  {
            ParameterizedType superclass = (ParameterizedType) getClass()
                            .getGenericSuperclass();

            return (Class<T>) superclass.getActualTypeArguments()[0];
    }

}