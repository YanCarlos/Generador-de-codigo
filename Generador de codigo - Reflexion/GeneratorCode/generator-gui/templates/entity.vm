#set($varCol = 0)
#macro( dataType $type $var)
    #foreach($foreign in $foreigns)
        #if($foreign.fkColumnName == $var)
        #nameType($foreign.pkTable)
        #set($varCol = 1)
        #break
        #end
    #end
    #if($varCol == 0)
        #if($type == 4)int
        #elseif($type == 12)String
        #elseif($type == -5)long
        #elseif($type == 5)short
        #elseif($type == -6)boolean
        #elseif($type == 3 || $type == 8)double
        #elseif($type == 6)float
        #elseif($type == 1)char
        #elseif($type == 2004)byte
        #elseif($type == 91 || $type == 92 || $type == 93)Date
        #end 
    #end
    #set($varCol = 0)
#end
#macro(nullable $type)
    #if($type == 0)false
    #elseif($type == 1)true #end
#end
#macro(nameType $name)$name.substring(0,1).toUpperCase()$name.substring(1).toLowerCase()#end

#macro(typeDate $type)
    #if($type == 91)@Temporal(TemporalType.DATE)
    #elseif($type == 92)@Temporal(TemporalType.TIME)
    #elseif($type == 93)@Temporal(TemporalType.TIMESTAMP)
    #end
#end

package $pack;

import java.io.Serializable;
#foreach($column in $columns)
#if($column.dataType == 91 || $column.dataType == 92 || $column.dataType == 93)
import java.util.Date;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
#break
#end
#end
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Id;
import javax.persistence.Column;
#if(!$foreigns.isEmpty())
import javax.persistence.ManyToOne;
import javax.persistence.JoinColumn;
#end

#if($primaries.size() > 1)
import javax.persistence.IdClass;

import com.entity.#nameType($table.tableName)Id;
#end

#set($bolCol = 0)
#set($nameCol = "")
/**
*Clase que representa la tabla de la base de datos con el nombre
*$table.tableName
*
*@author Project TLF 2016-2 Ing Software
*/
@Entity
@Table(name="$table.tableName")
#if($primaries.size() > 1)
@IdClass(#nameType($table.tableName)Id.class) 
#end
public class #nameType($table.tableName) implements Serializable{    
    #foreach($column in $columns)
    #foreach($primary in $primaries)
    #if($primary.columnName == $column.columnName)
    @Id
    #end
    #end
    #foreach($foreign in $foreigns)
    #if($foreign.fkColumnName == $column.columnName)
    @ManyToOne
    @JoinColumn(name = "$column.columnName",table = "$foreign.pkTable" ,referencedColumnName = "$foreign.pkColumnName")
    #set($bolCol = 1)
    #break
    #end
    #end
    #if($column.dataType == 91 || $column.dataType == 92 || $column.dataType == 93)
    #typeDate($column.dataType)
    #end
    #if($bolCol == 0)
    @Column(name="$column.columnName",length = $column.columnSize,nullable = #nullable($column.nullable))
    #end
    private #dataType($column.dataType $column.columnName) $column.columnName;
    
    #set($bolCol = 0)
    #end

    public #nameType($table.tableName)(){
        super();
    }

    public #nameType($table.tableName)
    (#foreach($column in $columns)#dataType($column.dataType $column.columnName) $column.columnName#if($foreach.count < $columns.size()),#end#end){
        super();
    #foreach($column in $columns)

        this.$column.columnName = $column.columnName;
    #end

    }
    #foreach($column in $columns)
    
    public #dataType($column.dataType $column.columnName) get#nameType($column.columnName)(){
        return this.$column.columnName;
    }
    
    public void set#nameType($column.columnName)
    (#dataType($column.dataType $column.columnName) $column.columnName){
        this.$column.columnName = $column.columnName;
    }
    #end
}